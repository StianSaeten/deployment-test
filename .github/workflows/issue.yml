name: Create ACA Workload PR

# Changed to manual trigger
on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare values
        id: prep
        run: |
          echo "serviceName=test"           >> $GITHUB_OUTPUT
          echo "branch=testbranch"          >> $GITHUB_OUTPUT
          echo "filepath=."                 >> $GITHUB_OUTPUT
          echo "filename=test.json"         >> $GITHUB_OUTPUT
          echo "environment=test"           >> $GITHUB_OUTPUT
          echo "instance=001"               >> $GITHUB_OUTPUT
          echo "locationCode=we"            >> $GITHUB_OUTPUT

      - name: Create branch if missing
        env:
          BRANCH: ${{ steps.prep.outputs.branch }}
        run: |
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            echo "Branch exists."
          else
            git switch --create "$BRANCH"
            git push origin "$BRANCH"
          fi

      - name: Configure git identity
        shell: bash
        run: |
          git config --global user.email "mr.robot0166@montel.energy"
          git config --global user.name  "mr.robot0166[bot]"

      - name: Write JSON file
        env:
          BRANCH:   ${{ steps.prep.outputs.branch }}
          FILEPATH: ${{ steps.prep.outputs.filepath }}
          FILENAME: ${{ steps.prep.outputs.filename }}
        run: |
          git fetch origin "$BRANCH"
          git switch "$BRANCH"
          mkdir -p "$FILEPATH"

          # Create the file with custom content
          echo "test file" > "${FILEPATH}/${FILENAME}"

          git add "${FILEPATH}/${FILENAME}"
          if ! git diff --cached --quiet; then
            git commit -m "Add ${FILENAME}"
            git push origin "$BRANCH"
          else
            echo "No changes to commit"
          fi

      - name: Create or reuse Issue
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const serviceName = `${{ steps.prep.outputs.serviceName }}`;
            const env = `${{ steps.prep.outputs.environment }}`;
            const loc = `${{ steps.prep.outputs.locationCode }}`;
            const inst = `${{ steps.prep.outputs.instance }}`;
            const path = `${{ steps.prep.outputs.filepath }}/${{ steps.prep.outputs.filename }}`;

            const fs = require('fs');

            const title = `[ACA Workload]: ${serviceName} (rg-${serviceName}-${env}-${loc}-${inst})`;
            const body = [
              `Generate ACA workload resources for **${serviceName}** in \`rg-${serviceName}-${env}-${loc}-${inst}\`.`,
              ``,
              `File to be added/updated: \`${path}\``,
              ``
            ].join('\n');

            // Try to find an open issue with the same title to avoid duplicates
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            let existing = issues.find(i => i.title === title && !i.pull_request);
            if (existing) {
              core.info(`Reusing existing issue #${existing.number}`);
              core.setOutput('number', existing.number.toString());
              core.setOutput('url', existing.html_url);
            } else {
              const { data: created } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body
              });
              core.info(`Issue created: #${created.number}`);
              core.setOutput('number', created.number.toString());
              core.setOutput('url', created.html_url);
            }

      - name: Open PR
        uses: actions/github-script@v7
        with:
          script:  |
            const branch = "${{ steps.prep.outputs.branch }}";
            const title  = `ACA Workload - ${{ steps.prep.outputs.serviceName }}`;
            const path   = `${{ steps.prep.outputs.filepath }}/${{ steps.prep.outputs.filename }}`;

            // Build body with code-fenced JSON
            const fs = require('fs');
            const json = fs.readFileSync('payload.json', 'utf8');
            const body =
              `File: ${path}\n\n` +
              "```\n" + json + "\n```";

            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                title,
                head:  branch,
                base:  "main",
                body
              });
              core.info(`PR created: #${pr.number}`);
            } catch (e) {
              // If PR already exists, ignore; otherwise, rethrow
              if (
                e.status === 422 &&
                (
                  (e.response && e.response.data && typeof e.response.data.message === "string" && e.response.data.message.includes("A pull request already exists")) ||
                  (typeof e.message === "string" && e.message.includes("A pull request already exists"))
                )
              ) {
                core.info("PR already exists.");
              } else {
                throw e;
              }
            }
              }
            }
